// src/screens/QuestionListScreen.js
import React, { useState } from 'react';
import {
    SafeAreaView,
    View,
    Text,
    TextInput,
    TouchableOpacity,
    FlatList,
    StyleSheet
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';

export default function QuestionListScreen() {
    const navigation = useNavigation();
    const [search, setSearch] = useState('');

    const recommendedTags = [
        'ÏòàÎ∞© Ï†ëÏ¢Ö', 'Î¥ÑÏ≤† Í∞êÍ∏∞', 'ÎØ∏ÏÑ∏Î®ºÏßÄ',
        'Í≥µÎ≥µ Î≥µÏö©', 'Ï°∏Ïùå Ïú†Î∞ú ÏïΩ', 'ÌòàÎãπ ÏàòÏπò'
    ];

    const postList = [
        {
            id: '1',
            title: 'ÏïΩÎ®πÏùÑ Îïå Î¨º ÎßêÍ≥† Îã§Î•∏ ÏùåÎ£åÎèÑ Í¥úÏ∞ÆÎÇòÏöî?',
            excerpt: 'Î∞ñÏóêÏÑú ÏïΩÏùÑ Î®πÏñ¥Ïïº ÌïòÎäîÎç∞ Î¨ºÏù¥ ÏóÜÏñ¥ÏÑú Î≥¥Î¶¨Ï∞® ÏùåÎ£åÎ•º ÎßàÏÖîÎèÑ Îê†ÍπåÏöî?',
            views: 15012,
            comments: 6,
            time: '1ÏãúÍ∞Ñ Ï†Ñ',
        },
        {
            id: '2',
            title: 'Í∞êÍ∏∞ÏïΩÏù¥Îûë ÎëêÌÜµÏïΩ Í∞ôÏù¥ Î®πÏñ¥ÎèÑ ÎêòÎÇòÏöî?',
            excerpt: 'Ï≤òÎ∞©Î∞õÏùÄ Í∞êÍ∏∞ÏïΩÏúºÎ°úÎäî ÎëêÌÜµÏù¥ Ïûò ÎÇ´Ïßà ÏïäÎäîÎç∞ ÏßëÏóê ÎëêÌÜµÏïΩÏùÑ Í∞ôÏù¥ Î®πÏñ¥ÎèÑ Îê†ÍπåÏöî?',
            views: 10894,
            comments: 4,
            time: '2ÏãúÍ∞Ñ Ï†Ñ',
        },
        {
            id: '3',
            title: 'Í≥µÎ≥µÏóê ÏïΩ Î®πÏúºÎ©¥ Ïïà ÎêòÎäî Ïù¥Ïú†Í∞Ä Î≠îÍ∞ÄÏöî?',
            excerpt: 'ÏïÑÏπ®Ïóê Ï∂úÍ∑º Ï†ÑÏóê Í∏âÌïòÍ≤å ÏïΩÏùÑ Î®πÎäîÎç∞, ÏãùÏ†ÑÏù¥Îûë ÏãùÌõÑÍ∞Ä Ìó∑Í∞àÎ†§Ïöî',
            views: 10894,
            comments: 4,
            time: '2ÏãúÍ∞Ñ Ï†Ñ',
        },
        {
            id: '4',
            title: 'ÎãπÎá® ÏïΩ Î®πÍ≥† ÎÇòÎ©¥ ÎÑàÎ¨¥ ÌîºÍ≥§Ìï¥Ïöî',
            excerpt: 'ÏïΩ Î®πÍ≥† ÎÇòÎ©¥ Ï°∏Î¶¨Í≥† Í∏∞Ïö¥Ïù¥ ÏóÜÏñ¥Ïöî, ÌòπÏãú ÏïΩ ÎïåÎ¨∏Ïùº ÏàòÎèÑ ÏûàÏùÑ Í≤É Í∞ôÏïÑÏÑú Î¨ºÏñ¥Î¥êÏöî',
            views: 10894,
            comments: 4,
            time: '2ÏãúÍ∞Ñ Ï†Ñ',
        },
        {
            id: '5',
            title: 'Ìï≠ÏÉùÏ†ú Î®πÏùÑ Îïå Ïú†ÏÇ∞Í∑†ÎèÑ Í∞ôÏù¥ Î®πÏñ¥Ïïº ÌïòÎÇòÏöî?',
            excerpt: 'ÏïΩ Î®πÍ≥† ÎÇòÎ©¥ Ï°∏Î¶¨Í≥† Í∏∞Ïö¥Ïù¥ ÏóÜÏñ¥Ïöî, ÌòπÏãú ÏïΩ ÎïåÎ¨∏Ïùº ÏàòÎèÑ ÏûàÏùÑ Í≤É Í∞ôÏïÑÏÑú Î¨ºÏñ¥Î¥êÏöî',
            views: 10894,
            comments: 4,
            time: '2ÏãúÍ∞Ñ Ï†Ñ',
        },
        // ... Ï∂îÍ∞Ä Ìï≠Î™©
    ];

    const filtered = postList.filter(p =>
        p.title.includes(search) || p.excerpt.includes(search)
    );

    const renderItem = ({ item }) => (
        <TouchableOpacity
            style={styles.postCard}
            activeOpacity={0.8}
            onPress={() => navigation.navigate('QuestionDetail', { post: item })}
        >
            <Text style={styles.postTitle}>{item.title}</Text>
            <Text style={styles.postExcerpt} numberOfLines={2}>{item.excerpt}</Text>
            <View style={styles.postMeta}>
                <View style={styles.metaItem}>
                    <Ionicons name="eye-outline" size={14} color="#888" />
                    <Text style={styles.metaText}>{item.views.toLocaleString()}</Text>
                </View>
                <View style={styles.metaItem}>
                    <Ionicons name="chatbubble-outline" size={14} color="#888" />
                    <Text style={styles.metaText}>{item.comments}</Text>
                </View>
                <Text style={[styles.metaText, { marginLeft: 'auto' }]}>{item.time}</Text>
            </View>
        </TouchableOpacity>
    );

    return (
        <SafeAreaView style={styles.container}>
            {/* Header */}
            <View style={styles.header}>
                <TouchableOpacity onPress={() => navigation.goBack()}>
                    <Ionicons name="chevron-back" size={24} color="#000" />
                </TouchableOpacity>
                <Text style={styles.headerTitle}>üí¨ Í∂ÅÍ∏àÌï¥Ïöî</Text>
                <View style={{ width: 24 }} />
            </View>

            {/* Search + Tags */}
            <View style={styles.body}>
                <View style={styles.searchBox}>
                    <Ionicons name="search-outline" size={20} color="#888" />
                    <TextInput
                        style={styles.searchInput}
                        placeholder="Ïñ¥Îñ§ Í≥†ÎØºÏù¥Îì† Í≤ÄÏÉâÌï¥ Î≥¥ÏÑ∏Ïöî."
                        placeholderTextColor="#888"
                        value={search}
                        onChangeText={setSearch}
                    />
                </View>

                <View style={styles.tagsRow}>
                    {recommendedTags.map((tag, i) => (
                        <TouchableOpacity
                            key={i}
                            style={styles.tagButton}
                            onPress={() => setSearch(tag)}
                        >
                            <Text style={styles.tagText}>{tag}</Text>
                        </TouchableOpacity>
                    ))}
                </View>

                <FlatList
                    data={filtered}
                    keyExtractor={item => item.id}
                    renderItem={renderItem}
                    contentContainerStyle={styles.listContent}
                    showsVerticalScrollIndicator={false}
                />
            </View>
        </SafeAreaView>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, backgroundColor: '#fff' },

    header: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        height: 56,
        paddingHorizontal: 16,
        borderBottomWidth: 0.5,
        borderColor: '#eee',
    },
    headerTitle: { fontSize: 18, fontWeight: 'bold', color: '#000' },

    body: { flex: 1, padding: 16 },

    searchBox: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#F2F2F8',
        borderRadius: 8,
        paddingHorizontal: 12,
        height: 40,
        marginBottom: 16,
    },
    searchInput: { flex: 1, marginLeft: 8, fontSize: 14, color: '#333' },

    tagsRow: { flexDirection: 'row', flexWrap: 'wrap', marginBottom: 24 },
    tagButton: {
        backgroundColor: '#F2F2F8',
        borderRadius: 16,
        paddingHorizontal: 12,
        paddingVertical: 6,
        marginRight: 8,
        marginBottom: 8,
    },
    tagText: { fontSize: 13, color: '#333' },

    listContent: { paddingBottom: 80 },

    postCard: {
        backgroundColor: '#fff',
        borderRadius: 12,
        padding: 16,
        marginBottom: 12,
        shadowColor: '#000',
        shadowOpacity: 0.05,
        shadowOffset: { width: 0, height: 4 },
        shadowRadius: 8,
        elevation: 2,
    },
    postTitle: { fontSize: 16, fontWeight: 'bold', color: '#000', marginBottom: 8 },
    postExcerpt: { fontSize: 14, color: '#666', marginBottom: 12, lineHeight: 20 },

    postMeta: { flexDirection: 'row', alignItems: 'center' },
    metaItem: { flexDirection: 'row', alignItems: 'center', marginRight: 16 },
    metaText: { fontSize: 12, color: '#888', marginLeft: 4 },
});
